.TH "Callbacks" 3 "Sat Mar 29 2025" "RGFW" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Callbacks \- Callbacks
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBRGFW_windowMovedfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_windowResizedfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_windowRestoredfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_windowMaximizedfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_windowMinimizedfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_windowQuitfunc\fP) (\fBRGFW_window\fP *win)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_focusfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_bool\fP inFocus)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_mouseNotifyfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_point\fP point, \fBRGFW_bool\fP status)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_mousePosfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_point\fP point, \fBRGFW_point\fP vector)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_dndInitfunc\fP) (\fBRGFW_window\fP *win, \fBRGFW_point\fP point)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_windowRefreshfunc\fP) (\fBRGFW_window\fP *win)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_keyfunc\fP) (\fBRGFW_window\fP *win, \fBu8\fP key, \fBu8\fP keyChar, RGFW_keymod keyMod, \fBRGFW_bool\fP pressed)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_mouseButtonfunc\fP) (\fBRGFW_window\fP *win, RGFW_mouseButton button, double scroll, \fBRGFW_bool\fP pressed)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_gamepadButtonfunc\fP) (\fBRGFW_window\fP *win, \fBu16\fP gamepad, \fBu8\fP button, \fBRGFW_bool\fP pressed)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_gamepadAxisfunc\fP) (\fBRGFW_window\fP *win, \fBu16\fP gamepad, \fBRGFW_point\fP axis[2], \fBu8\fP axisesCount, \fBu8\fP whichAxis)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_gamepadfunc\fP) (\fBRGFW_window\fP *win, \fBu16\fP gamepad, \fBRGFW_bool\fP connected)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_dndfunc\fP) (\fBRGFW_window\fP *win, char **droppedFiles, size_t droppedFilesCount)"
.br
.ti -1c
.RI "typedef void(* \fBRGFW_scaleUpdatedfunc\fP) (\fBRGFW_window\fP *win, float scaleX, float scaleY)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowMovedfunc\fP \fBRGFW_setWindowMovedCallback\fP (\fBRGFW_windowMovedfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP \fBRGFW_setWindowResizedCallback\fP (\fBRGFW_windowResizedfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowQuitfunc\fP \fBRGFW_setWindowQuitCallback\fP (\fBRGFW_windowQuitfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_mousePosfunc\fP \fBRGFW_setMousePosCallback\fP (\fBRGFW_mousePosfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowRefreshfunc\fP \fBRGFW_setWindowRefreshCallback\fP (\fBRGFW_windowRefreshfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_focusfunc\fP \fBRGFW_setFocusCallback\fP (\fBRGFW_focusfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_mouseNotifyfunc\fP \fBRGFW_setMouseNotifyCallback\fP (\fBRGFW_mouseNotifyfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_dndfunc\fP \fBRGFW_setDndCallback\fP (\fBRGFW_dndfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_dndInitfunc\fP \fBRGFW_setDndInitCallback\fP (\fBRGFW_dndInitfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_keyfunc\fP \fBRGFW_setKeyCallback\fP (\fBRGFW_keyfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_mouseButtonfunc\fP \fBRGFW_setMouseButtonCallback\fP (\fBRGFW_mouseButtonfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_gamepadButtonfunc\fP \fBRGFW_setGamepadButtonCallback\fP (\fBRGFW_gamepadButtonfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_gamepadAxisfunc\fP \fBRGFW_setGamepadAxisCallback\fP (\fBRGFW_gamepadAxisfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_gamepadfunc\fP \fBRGFW_setGamepadCallback\fP (\fBRGFW_gamepadfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP \fBRGFW_setWindowMaximizedCallback\fP (\fBRGFW_windowResizedfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP \fBRGFW_setWindowMinimizedCallback\fP (\fBRGFW_windowResizedfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP \fBRGFW_setWindowRestoredCallback\fP (\fBRGFW_windowResizedfunc\fP func)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_scaleUpdatedfunc\fP \fBRGFW_setScaleUpdatedCallback\fP (\fBRGFW_scaleUpdatedfunc\fP func)"
.br
.in -1c
.SH "Detailed Description"
.PP 
event callbacks\&. These are completely optional, so you can use the normal RGFW_checkEvent() method if you prefer that 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* RGFW_dndfunc) (\fBRGFW_window\fP *win, char **droppedFiles, size_t droppedFilesCount)"
RGFW_dnd, the window that had the drop, the drop data and the number of files dropped 
.SS "typedef void(* RGFW_dndInitfunc) (\fBRGFW_window\fP *win, \fBRGFW_point\fP point)"
RGFW_DNDInit, the window, the point of the drop on the windows 
.SS "typedef void(* RGFW_focusfunc) (\fBRGFW_window\fP *win, \fBRGFW_bool\fP inFocus)"
RGFW_focusIn / RGFW_focusOut, the window who's focus has changed and if its in focus 
.SS "typedef void(* RGFW_gamepadAxisfunc) (\fBRGFW_window\fP *win, \fBu16\fP gamepad, \fBRGFW_point\fP axis[2], \fBu8\fP axisesCount, \fBu8\fP whichAxis)"
RGFW_gamepadAxisMove, the window that got the event, the gamepad in question, the axis values and the axis count 
.SS "typedef void(* RGFW_gamepadButtonfunc) (\fBRGFW_window\fP *win, \fBu16\fP gamepad, \fBu8\fP button, \fBRGFW_bool\fP pressed)"
RGFW_gamepadButtonPressed, the window that got the event, the button that was pressed, the scroll value, if it was a press (else it's a release) 
.SS "typedef void(* RGFW_gamepadfunc) (\fBRGFW_window\fP *win, \fBu16\fP gamepad, \fBRGFW_bool\fP connected)"
RGFW_gamepadConnected / RGFW_gamepadDisconnected, the window that got the event, the gamepad in question, if the controller was connected (else it was disconnected) 
.SS "typedef void(* RGFW_keyfunc) (\fBRGFW_window\fP *win, \fBu8\fP key, \fBu8\fP keyChar, RGFW_keymod keyMod, \fBRGFW_bool\fP pressed)"
RGFW_keyPressed / RGFW_keyReleased, the window that got the event, the mapped key, the physical key, the string version, the state of the mod keys, if it was a press (else it's a release) 
.SS "typedef void(* RGFW_mouseButtonfunc) (\fBRGFW_window\fP *win, RGFW_mouseButton button, double scroll, \fBRGFW_bool\fP pressed)"
RGFW_mouseButtonPressed / RGFW_mouseButtonReleased, the window that got the event, the button that was pressed, the scroll value, if it was a press (else it's a release) 
.br
 
.SS "typedef void(* RGFW_mouseNotifyfunc) (\fBRGFW_window\fP *win, \fBRGFW_point\fP point, \fBRGFW_bool\fP status)"
RGFW_mouseEnter / RGFW_mouseLeave, the window that changed, the point of the mouse (enter only) and if the mouse has entered 
.SS "typedef void(* RGFW_mousePosfunc) (\fBRGFW_window\fP *win, \fBRGFW_point\fP point, \fBRGFW_point\fP vector)"
RGFW_mousePosChanged, the window that the move happened on, and the new point of the mouse 
.br
 
.SS "typedef void(* RGFW_scaleUpdatedfunc) (\fBRGFW_window\fP *win, float scaleX, float scaleY)"
RGFW_scaleUpdated, the window the event was sent to, content scaleX, content scaleY 
.SS "typedef void(* RGFW_windowMaximizedfunc) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
RGFW_windowMaximized, the window and its new rect value 
.br
 
.SS "typedef void(* RGFW_windowMinimizedfunc) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
RGFW_windowMinimized, the window and its new rect value 
.br
 
.SS "typedef void(* RGFW_windowMovedfunc) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
RGFW_windowMoved, the window and its new rect value 
.br
 
.SS "typedef void(* RGFW_windowQuitfunc) (\fBRGFW_window\fP *win)"
RGFW_quit, the window that was closed 
.SS "typedef void(* RGFW_windowRefreshfunc) (\fBRGFW_window\fP *win)"
RGFW_windowRefresh, the window that needs to be refreshed 
.SS "typedef void(* RGFW_windowResizedfunc) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
RGFW_windowResized, the window and its new rect value 
.br
 
.SS "typedef void(* RGFW_windowRestoredfunc) (\fBRGFW_window\fP *win, \fBRGFW_rect\fP r)"
RGFW_windowRestored, the window and its new rect value 
.br
 
.SH "Function Documentation"
.PP 
.SS "\fBRGFWDEF\fP \fBRGFW_dndfunc\fP RGFW_setDndCallback (\fBRGFW_dndfunc\fP func)"
set callback for a drop event event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_dndInitfunc\fP RGFW_setDndInitCallback (\fBRGFW_dndInitfunc\fP func)"
set callback for a start of a drop event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_focusfunc\fP RGFW_setFocusCallback (\fBRGFW_focusfunc\fP func)"
set callback for a window focus change event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_gamepadAxisfunc\fP RGFW_setGamepadAxisCallback (\fBRGFW_gamepadAxisfunc\fP func)"
set callback for a gamepad axis move event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_gamepadButtonfunc\fP RGFW_setGamepadButtonCallback (\fBRGFW_gamepadButtonfunc\fP func)"
set callback for a controller button (press / release) event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_gamepadfunc\fP RGFW_setGamepadCallback (\fBRGFW_gamepadfunc\fP func)"
set callback for when a controller is connected or disconnected\&. Returns the previous callback function (if it was set) 
.SS "\fBRGFWDEF\fP \fBRGFW_keyfunc\fP RGFW_setKeyCallback (\fBRGFW_keyfunc\fP func)"
set callback for a key (press / release) event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_mouseButtonfunc\fP RGFW_setMouseButtonCallback (\fBRGFW_mouseButtonfunc\fP func)"
set callback for a mouse button (press / release) event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_mouseNotifyfunc\fP RGFW_setMouseNotifyCallback (\fBRGFW_mouseNotifyfunc\fP func)"
set callback for a mouse notify event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_mousePosfunc\fP RGFW_setMousePosCallback (\fBRGFW_mousePosfunc\fP func)"
set callback for a mouse move event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_scaleUpdatedfunc\fP RGFW_setScaleUpdatedCallback (\fBRGFW_scaleUpdatedfunc\fP func)"
set callback for when the DPI changes\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP RGFW_setWindowMaximizedCallback (\fBRGFW_windowResizedfunc\fP func)"
set call back for when window is maximized\&. Returns the previous callback function (if it was set) 
.SS "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP RGFW_setWindowMinimizedCallback (\fBRGFW_windowResizedfunc\fP func)"
set call back for when window is minimized\&. Returns the previous callback function (if it was set) 
.SS "\fBRGFWDEF\fP \fBRGFW_windowMovedfunc\fP RGFW_setWindowMovedCallback (\fBRGFW_windowMovedfunc\fP func)"
set callback for a window move event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_windowQuitfunc\fP RGFW_setWindowQuitCallback (\fBRGFW_windowQuitfunc\fP func)"
set callback for a window quit event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_windowRefreshfunc\fP RGFW_setWindowRefreshCallback (\fBRGFW_windowRefreshfunc\fP func)"
set callback for a window refresh event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP RGFW_setWindowResizedCallback (\fBRGFW_windowResizedfunc\fP func)"
set callback for a window resize event\&. Returns previous callback function (if it was set) 
.br
 
.SS "\fBRGFWDEF\fP \fBRGFW_windowResizedfunc\fP RGFW_setWindowRestoredCallback (\fBRGFW_windowResizedfunc\fP func)"
set call back for when window is restored\&. Returns the previous callback function (if it was set) 
.SH "Author"
.PP 
Generated automatically by Doxygen for RGFW from the source code\&.

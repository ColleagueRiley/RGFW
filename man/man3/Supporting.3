.TH "Supporting" 3 "Sun Mar 16 2025" "RGFW" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Supporting \- Supporting
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBRGFWDEF\fP double \fBRGFW_getTime\fP (void)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu64\fP \fBRGFW_getTimeNS\fP (void)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP void \fBRGFW_sleep\fP (\fBu64\fP milisecond)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP void \fBRGFW_setTime\fP (double time)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu64\fP \fBRGFW_getTimerValue\fP (void)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu64\fP \fBRGFW_getTimerFreq\fP (void)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu32\fP \fBRGFW_checkFPS\fP (double startTime, \fBu32\fP frameCount, \fBu32\fP fpsCap)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP void \fBRGFW_setRootWindow\fP (\fBRGFW_window\fP *win)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_window\fP * \fBRGFW_getRootWindow\fP (void)"
.br
.ti -1c
.RI "void \fBRGFW_eventQueuePush\fP (\fBRGFW_event\fP event)"
.br
.ti -1c
.RI "\fBRGFW_event\fP * \fBRGFW_eventQueuePop\fP (\fBRGFW_window\fP *win)"
.br
.ti -1c
.RI "typedef \fBRGFW_ENUM\fP (\fBu8\fP, \fBRGFW_key\fP)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu32\fP \fBRGFW_apiKeyToRGFW\fP (\fBu32\fP keycode)"
.br
.ti -1c
.RI "typedef \fBRGFW_ENUM\fP (\fBu8\fP, RGFW_mouseIcons)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.IP "\(bu" 2

.PP

.SH "Function Documentation"
.PP 
.SS "\fBRGFWDEF\fP \fBu32\fP RGFW_apiKeyToRGFW (\fBu32\fP keycode)"

.SS "\fBRGFWDEF\fP \fBu32\fP RGFW_checkFPS (double startTime, \fBu32\fP frameCount, \fBu32\fP fpsCap)"
change which window is the root window 
.SS "typedef RGFW_ENUM (\fBu8\fP, \fBRGFW_key\fP)"
key codes and mouse icon enums 
.SS "typedef RGFW_ENUM (\fBu8\fP, RGFW_mouseIcons)"

.SS "\fBRGFW_event\fP * RGFW_eventQueuePop (\fBRGFW_window\fP * win)"

.SS "void RGFW_eventQueuePush (\fBRGFW_event\fP event)"
standard event queue, used for injecting events and returning source API callback events like any other queue check 
.SS "\fBRGFWDEF\fP \fBRGFW_window\fP * RGFW_getRootWindow (void)"

.SS "\fBRGFWDEF\fP double RGFW_getTime (void)"
get time in seconds since RGFW_setTime, which ran when the first window is open 
.br
 
.SS "\fBRGFWDEF\fP \fBu64\fP RGFW_getTimeNS (void)"
get time in nanoseconds RGFW_setTime, which ran when the first window is open 
.SS "\fBRGFWDEF\fP \fBu64\fP RGFW_getTimerFreq (void)"
get API time freq 
.SS "\fBRGFWDEF\fP \fBu64\fP RGFW_getTimerValue (void)"
get API timer value 
.SS "\fBRGFWDEF\fP void RGFW_setRootWindow (\fBRGFW_window\fP * win)"

.SS "\fBRGFWDEF\fP void RGFW_setTime (double time)"
set timer in seconds 
.SS "\fBRGFWDEF\fP void RGFW_sleep (\fBu64\fP milisecond)"
sleep for a set time 
.SH "Author"
.PP 
Generated automatically by Doxygen for RGFW from the source code\&.

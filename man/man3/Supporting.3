.TH "Supporting" 3 "Fri Jul 25 2025" "RGFW" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Supporting \- Supporting
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRGFW_MAX_EVENTS\fP   32"
.br
.ti -1c
.RI "#define \fBRGFW_eventQueuePushEx\fP(eventInit)   { \fBRGFW_event\fP e; eventInit; \fBRGFW_eventQueuePush\fP(e); }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBRGFWDEF\fP void \fBRGFW_setRootWindow\fP (\fBRGFW_window\fP *win)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBRGFW_window\fP * \fBRGFW_getRootWindow\fP (void)"
.br
.ti -1c
.RI "void \fBRGFW_eventQueuePush\fP (\fBRGFW_event\fP event)"
.br
.ti -1c
.RI "\fBRGFW_event\fP * \fBRGFW_eventQueuePop\fP (\fBRGFW_window\fP *win)"
.br
.ti -1c
.RI "typedef \fBRGFW_ENUM\fP (\fBu8\fP, \fBRGFW_key\fP)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu32\fP \fBRGFW_apiKeyToRGFW\fP (\fBu32\fP keycode)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu32\fP \fBRGFW_rgfwToApiKey\fP (\fBu32\fP keycode)"
.br
.ti -1c
.RI "\fBRGFWDEF\fP \fBu8\fP \fBRGFW_rgfwToKeyChar\fP (\fBu32\fP keycode)"
.br
.ti -1c
.RI "typedef \fBRGFW_ENUM\fP (\fBu8\fP, RGFW_mouseIcons)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.IP "\(bu" 2

.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define RGFW_eventQueuePushEx(eventInit)   { \fBRGFW_event\fP e; eventInit; \fBRGFW_eventQueuePush\fP(e); }"

.SS "#define RGFW_MAX_EVENTS   32"
change which window is the root window 
.SH "Function Documentation"
.PP 
.SS "\fBRGFWDEF\fP \fBu32\fP RGFW_apiKeyToRGFW (\fBu32\fP keycode)"
converts api keycode to the RGFW unmapped/physical key 
.SS "typedef RGFW_ENUM (\fBu8\fP, \fBRGFW_key\fP)"
key codes and mouse icon enums 
.SS "typedef RGFW_ENUM (\fBu8\fP, RGFW_mouseIcons)"

.SS "\fBRGFW_event\fP * RGFW_eventQueuePop (\fBRGFW_window\fP * win)"

.SS "void RGFW_eventQueuePush (\fBRGFW_event\fP event)"
standard event queue, used for injecting events and returning source API callback events like any other queue check 
.SS "\fBRGFWDEF\fP \fBRGFW_window\fP * RGFW_getRootWindow (void)"

.SS "\fBRGFWDEF\fP \fBu32\fP RGFW_rgfwToApiKey (\fBu32\fP keycode)"
converts RGFW keycode to the unmapped/physical api key 
.SS "\fBRGFWDEF\fP \fBu8\fP RGFW_rgfwToKeyChar (\fBu32\fP keycode)"
converts RGFW keycode to the mapped keychar 
.SS "\fBRGFWDEF\fP void RGFW_setRootWindow (\fBRGFW_window\fP * win)"

.SH "Author"
.PP 
Generated automatically by Doxygen for RGFW from the source code\&.
